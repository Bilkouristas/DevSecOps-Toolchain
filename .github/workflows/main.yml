name: CI/CD Pipeline 
run-name: ${{ github.actor }} is making a spicy DAST tool

on: 
  push: 
    branches: ['master']
    
jobs:
  Continuous_Integration:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up node.js
        uses: actions/setup-node@v3
        with: 
          node-version: '12'

      - name: Set up java environment
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

# Compiling our web app which in our case is DVWA
      - name: Installing requirements 
        run: |
          sudo apt update
          sudo apt install -y apache2 mariadb-server mariadb-client php php-mysqli php-gd libapache2-mod-php

      - name: Starting apache server
        run: |
          cd DVWA
          sudo service apache2 start 
          cp config/config.inc.php.dist config/config.inc.php 

      - name: Creating database
        run: |
          cd DVWA
          sudo mariadb -u root;
          create database dvwa;
          drop user dvwa@localhost;
          flush privileges;
          create user dvwa@localhost identified by 'p@assw0rd';
          grant all on dvwa.* to dvwa@localhost;
          flush privileges;
          exit;
          sudo mariadb -u dvwa -p p@ssw0rd;
          source ~/DVWA/databases/create_mssql_db.sql;
          exit;

# After the buil dof our web app, we are ready to perform our first DAST tool scan 
# Modify the file example.js depending on the needs of the scan you want to perform
      - name: Running DAST tool readily available as a docker image
        run: |
          cd DAST_Tool/mern-app 
          docker-compose up
          
      - name: Performing scan
        run: |
          cd DAST_Tool/mern-app/zapscanner
          node example.js

      # - name: Install Dependencies 
      #   run: |
      #     cd WebGoat
      #     chmod +x mvnw
      #     ./mvnw clean install

      # - name: Build Docker image locally
      #   run: |
      #     cd WebGoat
      #     chmod +x mvnw
      #     docker build -f Dockerfile . -t webgoat/webgoat 

      # - name: Run the project  
      #   run: |
      #     cd WebGoat
      #     chmod +x mvnw
      #     ./mvnw spring-boot:run
      